resource "aws_security_group" "allow_ovpn" {
  name        = "allow_ovpn"
  description = "allow ovpn inbound traffic"
  vpc_id      =  var.vpc.id
}

    type        = "ingress"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
    security_group_id = aws_security_group.allow.ovpn.id
  }

    type        = "ingress"	
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
    security_group_id = aws_security_group.allow.ovpn.id
  }


resource "aws_lb" "allow_ovpn" {
  name               = "allow_ovpn"
  internal           = false
  load_balancer_type = "application"
  security_groups    = aws_security_group.allow_ovpn.id
  subnets            = var.subnet_cidrs[count.index]["public"]

   }


variable "ports" {
  type    = map(number)
  default = {
    http  = 80
    https = 443
  }
}

resource "aws_lb_listener" "allow_ovpn" {
  for_each = var.ports

  load_balancer_arn = aws_lb.allow_ovpn.arn

  protocol          = "TCP"
  port              = each.value

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.allow_ovpn[each.key].arn
  }
}


resource "aws_lb_target_group" "allow_ovpn" {
  for_each = var.ports

  port        = each.value
  protocol    = "TCP"
  vpc_id      = var.vpc_id

  stickiness = []

  depends_on = [
    aws_lb.allow_ovpn
  ]

  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_autoscaling_attachment" "target" {
  for_each = var.ports

  autoscaling_group_name = var.asg
  alb_target_group_arn   = aws_lb_target_group.allow_ovpn[each.value].arn
}


resource "aws_route53_record" "www" {
  zone_id = aws_route53_zone.primary.zone_id
  name    = "www.example.com"
  type    = "A"
  ttl     = "300"
  records = [aws_eip.lb.public_ip]
}